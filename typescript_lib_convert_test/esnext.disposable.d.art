/// <reference lib="es2015.symbol" />

тип SymbolConstructor = интерфейс
{
  защищено 
  dispose`: /*(!) unique symbol */ Объект

  защищено 
  asyncDispose: /*(!) unique symbol */ Объект
}


тип Disposable = интерфейс
{
  операция [Symbol.dispose]()
}


тип AsyncDisposable = интерфейс
{
  операция [Symbol.asyncDispose](): PromiseLike<Ничего>
}


тип SuppressedError = объект Error
{
  error`: /*(!) any */ Объект?

  suppressed: /*(!) any */ Объект?

  при создании(error`: /*(!) any */ Объект?, suppressed: /*(!) any */ Объект?, message: Текст? = пусто): SuppressedError

  // (!) (error: any, suppressed: any, message?: string): SuppressedError

  защищено
  prototype: SuppressedError
}

тип DisposableStack = объект
{
  защищено
  disposed: ДаНет

  операция dispose`()

  операция use<T = Disposable?>(value: T): T

  операция adopt<T>(value: T, onDispose: операция(value: T)): T

  операция defer(onDispose: операция())

  операция move(): DisposableStack

  операция [Symbol.dispose]()

  защищено
  [Symbol.toStringTag]: Текст

  при создании(): DisposableStack

  защищено
  prototype: DisposableStack
}

тип AsyncDisposableStack = объект
{
  защищено
  disposed: ДаНет

  операция disposeAsync(): Promise<Ничего>

  операция use<T = Объект? /*(!)AsyncDisposable | Disposable | пусто | пусто*/>(value: T): T

  операция adopt<T>(value: T, onDisposeAsync: операция(value: T): PromiseLike<Ничего>?): T

  операция defer(onDisposeAsync: операция(): PromiseLike<Ничего>?)

  операция move(): AsyncDisposableStack

  операция [Symbol.asyncDispose](): Promise<Ничего>

  защищено
  [Symbol.toStringTag]: Текст

  при создании(): AsyncDisposableStack

  защищено
  prototype: AsyncDisposableStack
}
