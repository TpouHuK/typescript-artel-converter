/////////////////////////////

/// Worker Iterable APIs

/////////////////////////////

тип CSSNumericArray = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<CSSNumericValue>

  операция entries(): IterableIterator<объект { _0: Число, _1: CSSNumericValue }>

  операция keys(): IterableIterator<Число>

  операция values(): IterableIterator<CSSNumericValue>
}


тип CSSTransformValue = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<CSSTransformComponent>

  операция entries(): IterableIterator<объект { _0: Число, _1: CSSTransformComponent }>

  операция keys(): IterableIterator<Число>

  операция values(): IterableIterator<CSSTransformComponent>
}


тип CSSUnparsedValue = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<CSSUnparsedSegment>

  операция entries(): IterableIterator<объект { _0: Число, _1: CSSUnparsedSegment }>

  операция keys(): IterableIterator<Число>

  операция values(): IterableIterator<CSSUnparsedSegment>
}


тип Cache = интерфейс
{
  операция addAll(requests: Iterable<RequestInfo>): Promise<Ничего>
}


тип CanvasPath = интерфейс
{
  операция roundRect(x: Число, y: Число, w: Число, h: Число, radii: Число | DOMPointInit | Iterable<Число | DOMPointInit> | пусто = пусто)
}


тип CanvasPathDrawingStyles = интерфейс
{
  операция setLineDash(segments: Iterable<Число>)
}


тип DOMStringList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Текст>
}


тип FileList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<File>
}


тип FontFaceSet = интерфейс на основе Set<FontFace>
{

}


тип FormData = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<объект { _0: Текст, _1: FormDataEntryValue }>

  операция entries(): IterableIterator<объект { _0: Текст, _1: FormDataEntryValue }>

  операция keys(): IterableIterator<Текст>

  операция values(): IterableIterator<FormDataEntryValue>
}


тип Headers = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<объект { _0: Текст, _1: Текст }>

  операция entries(): IterableIterator<объект { _0: Текст, _1: Текст }>

  операция keys(): IterableIterator<Текст>

  операция values(): IterableIterator<Текст>
}


тип IDBDatabase = интерфейс
{
  операция transaction(storeNames: Текст | Iterable<Текст>, mode: IDBTransactionMode? = пусто, options: IDBTransactionOptions? = пусто): IDBTransaction
}


тип IDBObjectStore = интерфейс
{
  операция createIndex(name: Текст, keyPath: Текст | Iterable<Текст>, options: IDBIndexParameters? = пусто): IDBIndex
}


тип MessageEvent<T> = интерфейс
{

}


тип StylePropertyMapReadOnly = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<объект { _0: Текст, _1: Iterable<CSSStyleValue> }>

  операция entries(): IterableIterator<объект { _0: Текст, _1: Iterable<CSSStyleValue> }>

  операция keys(): IterableIterator<Текст>

  операция values(): IterableIterator<Iterable<CSSStyleValue>>
}


тип SubtleCrypto = интерфейс
{
  операция deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params, extractable: ДаНет, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>

  операция generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: ДаНет, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>

  операция generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: ДаНет, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>

  операция generateKey(algorithm: AlgorithmIdentifier, extractable: ДаНет, keyUsages: Iterable<KeyUsage>): Promise<CryptoKeyPair | CryptoKey>

  операция importKey(format: "jwk", keyData: JsonWebKey, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: ДаНет, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>

  операция importKey(format: Exclude<KeyFormat, "jwk">, keyData: BufferSource, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: ДаНет, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>

  операция unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: ДаНет, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>
}


тип URLSearchParams = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<объект { _0: Текст, _1: Текст }>

  операция entries(): IterableIterator<объект { _0: Текст, _1: Текст }>

  операция keys(): IterableIterator<Текст>

  операция values(): IterableIterator<Текст>
}


тип WEBGL_draw_buffers = интерфейс
{
  операция drawBuffersWEBGL(buffers: Iterable<GLenum>)
}


тип WEBGL_multi_draw = интерфейс
{
  операция multiDrawArraysInstancedWEBGL(mode: GLenum, firstsList: Int32Array | Iterable<GLint>, firstsOffset: GLuint, countsList: Int32Array | Iterable<GLsizei>, countsOffset: GLuint, instanceCountsList: Int32Array | Iterable<GLsizei>, instanceCountsOffset: GLuint, drawcount: GLsizei)

  операция multiDrawArraysWEBGL(mode: GLenum, firstsList: Int32Array | Iterable<GLint>, firstsOffset: GLuint, countsList: Int32Array | Iterable<GLsizei>, countsOffset: GLuint, drawcount: GLsizei)

  операция multiDrawElementsInstancedWEBGL(mode: GLenum, countsList: Int32Array | Iterable<GLsizei>, countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | Iterable<GLsizei>, offsetsOffset: GLuint, instanceCountsList: Int32Array | Iterable<GLsizei>, instanceCountsOffset: GLuint, drawcount: GLsizei)

  операция multiDrawElementsWEBGL(mode: GLenum, countsList: Int32Array | Iterable<GLsizei>, countsOffset: GLuint, type: GLenum, offsetsList: Int32Array | Iterable<GLsizei>, offsetsOffset: GLuint, drawcount: GLsizei)
}


тип WebGL2RenderingContextBase = интерфейс
{
  операция clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLfloat>, srcOffset: GLuint? = пусто)

  операция clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLint>, srcOffset: GLuint? = пусто)

  операция clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLuint>, srcOffset: GLuint? = пусто)

  операция drawBuffers(buffers: Iterable<GLenum>)

  операция getActiveUniforms(program: WebGLProgram, uniformIndices: Iterable<GLuint>, pname: GLenum): /*(!) any */ Объект?

  операция getUniformIndices(program: WebGLProgram, uniformNames: Iterable<Текст>): Iterable<GLuint>?

  операция invalidateFramebuffer(target: GLenum, attachments: Iterable<GLenum>)

  операция invalidateSubFramebuffer(target: GLenum, attachments: Iterable<GLenum>, x: GLint, y: GLint, width: GLsizei, height: GLsizei)

  операция transformFeedbackVaryings(program: WebGLProgram, varyings: Iterable<Текст>, bufferMode: GLenum)

  операция uniform1uiv(location: WebGLUniformLocation?, data: Iterable<GLuint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform2uiv(location: WebGLUniformLocation?, data: Iterable<GLuint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform3uiv(location: WebGLUniformLocation?, data: Iterable<GLuint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform4uiv(location: WebGLUniformLocation?, data: Iterable<GLuint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix2x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix2x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix3x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix3x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix4x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix4x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция vertexAttribI4iv(index: GLuint, values: Iterable<GLint>)

  операция vertexAttribI4uiv(index: GLuint, values: Iterable<GLuint>)
}


тип WebGL2RenderingContextOverloads = интерфейс
{
  операция uniform1fv(location: WebGLUniformLocation?, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform1iv(location: WebGLUniformLocation?, data: Iterable<GLint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform2fv(location: WebGLUniformLocation?, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform2iv(location: WebGLUniformLocation?, data: Iterable<GLint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform3fv(location: WebGLUniformLocation?, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform3iv(location: WebGLUniformLocation?, data: Iterable<GLint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform4fv(location: WebGLUniformLocation?, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform4iv(location: WebGLUniformLocation?, data: Iterable<GLint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)
}


тип WebGLRenderingContextBase = интерфейс
{
  операция vertexAttrib1fv(index: GLuint, values: Iterable<GLfloat>)

  операция vertexAttrib2fv(index: GLuint, values: Iterable<GLfloat>)

  операция vertexAttrib3fv(index: GLuint, values: Iterable<GLfloat>)

  операция vertexAttrib4fv(index: GLuint, values: Iterable<GLfloat>)
}


тип WebGLRenderingContextOverloads = интерфейс
{
  операция uniform1fv(location: WebGLUniformLocation?, v: Iterable<GLfloat>)

  операция uniform1iv(location: WebGLUniformLocation?, v: Iterable<GLint>)

  операция uniform2fv(location: WebGLUniformLocation?, v: Iterable<GLfloat>)

  операция uniform2iv(location: WebGLUniformLocation?, v: Iterable<GLint>)

  операция uniform3fv(location: WebGLUniformLocation?, v: Iterable<GLfloat>)

  операция uniform3iv(location: WebGLUniformLocation?, v: Iterable<GLint>)

  операция uniform4fv(location: WebGLUniformLocation?, v: Iterable<GLfloat>)

  операция uniform4iv(location: WebGLUniformLocation?, v: Iterable<GLint>)

  операция uniformMatrix2fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Iterable<GLfloat>)

  операция uniformMatrix3fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Iterable<GLfloat>)

  операция uniformMatrix4fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Iterable<GLfloat>)
}

