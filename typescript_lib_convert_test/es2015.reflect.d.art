внешнее /*(!) Reflect */
{
  /**
  * Calls the function with the specified object as the this value
  * and the elements of specified array as the arguments.
  * @param target The function to call.
  * @param thisArgument The object to be used as the this object.
  * @param argumentsList An array of argument values to be passed to the function.
  */

  операция apply<T, A = /*(!) защищено */ Список</*(!) any */ Объект?>, R>(target: операция(this: T, args: A): R, thisArgument: T, argumentsList: Readonly<A>): R

  операция apply(target: Function, thisArgument: /*(!) any */ Объект?, argumentsList: ArrayLike</*(!) any */ Объект?>): /*(!) any */ Объект?

  /**
  * Constructs the target with the elements of specified array as the arguments
  * and the specified constructor as the `new.target` value.
  * @param target The constructor to invoke.
  * @param argumentsList An array of argument values to be passed to the constructor.
  * @param newTarget The constructor to be used as the `new.target` object.
  */

  операция construct<A = /*(!) защищено */ Список</*(!) any */ Объект?>, R>(target: /*(!) new (...args: A) => R */ Объект?, argumentsList: Readonly<A>, newTarget: /*(!) new (...args: any) => any */ Объект? = пусто): R

  операция construct(target: Function, argumentsList: ArrayLike</*(!) any */ Объект?>, newTarget: Function? = пусто): /*(!) any */ Объект?

  /**
  * Adds a property to an object, or modifies attributes of an existing property.
  * @param target Object on which to add or modify the property. This can be a native JavaScript object
  *        (that is, a user-defined object or a built in object) or a DOM object.
  * @param propertyKey The property name.
  * @param attributes Descriptor for the property. It can be for a data property or an accessor property.
  */

  операция defineProperty(target: Объект, propertyKey: PropertyKey, attributes: /*(!) PropertyDescriptor & ThisType<any> */ Объект?): ДаНет

  /**
  * Removes a property from an object, equivalent to `delete target[propertyKey]`,
  * except it won't throw if `target[propertyKey]` is non-configurable.
  * @param target Object from which to remove the own property.
  * @param propertyKey The property name.
  */

  операция deleteProperty(target: Объект, propertyKey: PropertyKey): ДаНет

  /**
  * Gets the property of target, equivalent to `target[propertyKey]` when `receiver === target`.
  * @param target Object that contains the property on itself or in its prototype chain.
  * @param propertyKey The property name.
  * @param receiver The reference to use as the `this` value in the getter function,
  *        if `target[propertyKey]` is an accessor property.
  */

  операция get<T = Объект, P = PropertyKey>(target: T, propertyKey: P, receiver: /*(!) unknown */ Объект? = пусто): /*(!) P extends keyof T ? T[P] : any */ Объект?

  /**
  * Gets the own property descriptor of the specified object.
  * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.
  * @param target Object that contains the property.
  * @param propertyKey The property name.
  */

  операция getOwnPropertyDescriptor<T = Объект, P = PropertyKey>(target: T, propertyKey: P): TypedPropertyDescriptor</*(!) P extends keyof T ? T[P] : any */ Объект?>?

  /**
  * Returns the prototype of an object.
  * @param target The object that references the prototype.
  */

  операция getPrototypeOf(target: Объект): Объект?

  /**
  * Equivalent to `propertyKey in target`.
  * @param target Object that contains the property on itself or in its prototype chain.
  * @param propertyKey Name of the property.
  */

  операция has(target: Объект, propertyKey: PropertyKey): ДаНет

  /**
  * Returns a value that indicates whether new properties can be added to an object.
  * @param target Object to test.
  */

  операция isExtensible(target: Объект): ДаНет

  /**
  * Returns the string and symbol keys of the own properties of an object. The own properties of an object
  * are those that are defined directly on that object, and are not inherited from the object's prototype.
  * @param target Object that contains the own properties.
  */

  операция ownKeys(target: Объект): Список<Объект? /*(!)Текст | Символ*/>

  /**
  * Prevents the addition of new properties to an object.
  * @param target Object to make non-extensible.
  * @return Whether the object has been made non-extensible.
  */

  операция preventExtensions(target: Объект): ДаНет

  /**
  * Sets the property of target, equivalent to `target[propertyKey] = value` when `receiver === target`.
  * @param target Object that contains the property on itself or in its prototype chain.
  * @param propertyKey Name of the property.
  * @param receiver The reference to use as the `this` value in the setter function,
  *        if `target[propertyKey]` is an accessor property.
  */

  операция set<T = Объект, P = PropertyKey>(target: T, propertyKey: P, value: /*(!) P extends keyof T ? T[P] : any */ Объект?, receiver: /*(!) any */ Объект? = пусто): ДаНет

  операция set(target: Объект, propertyKey: PropertyKey, value: /*(!) any */ Объект?, receiver: /*(!) any */ Объект? = пусто): ДаНет

  /**
  * Sets the prototype of a specified object o to object proto or null.
  * @param target The object to change its prototype.
  * @param proto The value of the new prototype or null.
  * @return Whether setting the prototype was successful.
  */

  операция setPrototypeOf(target: Объект, proto: Объект?): ДаНет}
