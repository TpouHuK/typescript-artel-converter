тип Map<K, V> = объект
{
  операция clear()

  операция delete(key: K): ДаНет

  операция forEach(callbackfn: операция(value: V, key: K, map: Map<K, V>), thisArg: /*(!) any */ Объект? = пусто)

  операция get(key: K): V?

  операция has(key: K): ДаНет

  операция set(key: K, value: V): /*(!) this */ Объект?

  защищено
  size: Число

  при создании(): Map</*(!) any */ Объект?, /*(!) any */ Объект?>

  при создании(entries: /*(!) защищено */ (Список</*(!) защищено */ объект { _0: K, _1: V }>?)? = пусто): Map<K, V>

  защищено
  prototype: Map</*(!) any */ Объект?, /*(!) any */ Объект?>
}

тип ReadonlyMap<K, V> = интерфейс
{
  операция forEach(callbackfn: операция(value: V, key: K, map: ReadonlyMap<K, V>), thisArg: /*(!) any */ Объект? = пусто)

  операция get(key: K): V?

  операция has(key: K): ДаНет

  защищено 
  size: Число
}


тип WeakMap<K = WeakKey, V> = объект
{
  операция delete(key: K): ДаНет

  операция get(key: K): V?

  операция has(key: K): ДаНет

  операция set(key: K, value: V): /*(!) this */ Объект?

  при создании(entries: /*(!) защищено */ (Список</*(!) защищено */ объект { _0: K, _1: V }>?)? = пусто): WeakMap<K, V>

  защищено
  prototype: WeakMap<WeakKey, /*(!) any */ Объект?>
}

тип Set<T> = объект
{
  операция add(value: T): /*(!) this */ Объект?

  операция clear()

  операция delete(value: T): ДаНет

  операция forEach(callbackfn: операция(value: T, value2: T, set: Set<T>), thisArg: /*(!) any */ Объект? = пусто)

  операция has(value: T): ДаНет

  защищено
  size: Число

  при создании(values: /*(!) защищено */ (Список<T>?)? = пусто): Set<T>

  защищено
  prototype: Set</*(!) any */ Объект?>
}

тип ReadonlySet<T> = интерфейс
{
  операция forEach(callbackfn: операция(value: T, value2: T, set: ReadonlySet<T>), thisArg: /*(!) any */ Объект? = пусто)

  операция has(value: T): ДаНет

  защищено 
  size: Число
}


тип WeakSet<T = WeakKey> = объект
{
  операция add(value: T): /*(!) this */ Объект?

  операция delete(value: T): ДаНет

  операция has(value: T): ДаНет

  при создании(values: /*(!) защищено */ (Список<T>?)? = пусто): WeakSet<T>

  защищено
  prototype: WeakSet<WeakKey>
}
