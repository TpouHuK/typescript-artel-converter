/////////////////////////////

/// Window Iterable APIs

/////////////////////////////

тип AudioParam = интерфейс
{
  операция setValueCurveAtTime(values: Iterable<Число>, startTime: Число, duration: Число): AudioParam
}


тип AudioParamMap = интерфейс ReadonlyMap<Текст, AudioParam>
{

}


тип BaseAudioContext = интерфейс
{
  операция createIIRFilter(feedforward: Iterable<Число>, feedback: Iterable<Число>): IIRFilterNode

  операция createPeriodicWave(real: Iterable<Число>, imag: Iterable<Число>, constraints: PeriodicWaveConstraints? = пусто): PeriodicWave
}


тип CSSKeyframesRule = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<CSSKeyframeRule>
}


тип CSSNumericArray = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<CSSNumericValue>

  операция entries(): IterableIterator<объект { _0: Число, _1: CSSNumericValue }>

  операция keys(): IterableIterator<Число>

  операция values(): IterableIterator<CSSNumericValue>
}


тип CSSRuleList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<CSSRule>
}


тип CSSStyleDeclaration = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Текст>
}


тип CSSTransformValue = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<CSSTransformComponent>

  операция entries(): IterableIterator<объект { _0: Число, _1: CSSTransformComponent }>

  операция keys(): IterableIterator<Число>

  операция values(): IterableIterator<CSSTransformComponent>
}


тип CSSUnparsedValue = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<CSSUnparsedSegment>

  операция entries(): IterableIterator<объект { _0: Число, _1: CSSUnparsedSegment }>

  операция keys(): IterableIterator<Число>

  операция values(): IterableIterator<CSSUnparsedSegment>
}


тип Cache = интерфейс
{
  операция addAll(requests: Iterable<RequestInfo>): Promise<Ничего>
}


тип CanvasPath = интерфейс
{
  операция roundRect(x: Число, y: Число, w: Число, h: Число, radii: Объект? /*(!)Число | DOMPointInit | Iterable<Объект? /*(!)Число | DOMPointInit*/> | пусто*/ = пусто)
}


тип CanvasPathDrawingStyles = интерфейс
{
  операция setLineDash(segments: Iterable<Число>)
}


тип DOMRectList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<DOMRect>
}


тип DOMStringList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Текст>
}


тип DOMTokenList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Текст>

  операция entries(): IterableIterator<объект { _0: Число, _1: Текст }>

  операция keys(): IterableIterator<Число>

  операция values(): IterableIterator<Текст>
}


тип DataTransferItemList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<DataTransferItem>
}


тип EventCounts = интерфейс ReadonlyMap<Текст, Число>
{

}


тип FileList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<File>
}


тип FontFaceSet = интерфейс Set<FontFace>
{

}


тип FormData = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<объект { _0: Текст, _1: FormDataEntryValue }>

  операция entries(): IterableIterator<объект { _0: Текст, _1: FormDataEntryValue }>

  операция keys(): IterableIterator<Текст>

  операция values(): IterableIterator<FormDataEntryValue>
}


тип HTMLAllCollection = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Element>
}


тип HTMLCollectionBase = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Element>
}


тип HTMLCollectionOf<T = Element> = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<T>
}


тип HTMLFormElement = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Element>
}


тип HTMLSelectElement = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<HTMLOptionElement>
}


тип Headers = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<объект { _0: Текст, _1: Текст }>

  операция entries(): IterableIterator<объект { _0: Текст, _1: Текст }>

  операция keys(): IterableIterator<Текст>

  операция values(): IterableIterator<Текст>
}


тип IDBDatabase = интерфейс
{
  операция transaction(storeNames: Объект? /*(!)Текст | Iterable<Текст>*/, mode: IDBTransactionMode? = пусто, options: IDBTransactionOptions? = пусто): IDBTransaction
}


тип IDBObjectStore = интерфейс
{
  операция createIndex(name: Текст, keyPath: Объект? /*(!)Текст | Iterable<Текст>*/, options: IDBIndexParameters? = пусто): IDBIndex
}


тип MIDIInputMap = интерфейс ReadonlyMap<Текст, MIDIInput>
{

}


тип MIDIOutput = интерфейс
{
  операция send(data: Iterable<Число>, timestamp: DOMHighResTimeStamp? = пусто)
}


тип MIDIOutputMap = интерфейс ReadonlyMap<Текст, MIDIOutput>
{

}


тип MediaKeyStatusMap = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<объект { _0: BufferSource, _1: MediaKeyStatus }>

  операция entries(): IterableIterator<объект { _0: BufferSource, _1: MediaKeyStatus }>

  операция keys(): IterableIterator<BufferSource>

  операция values(): IterableIterator<MediaKeyStatus>
}


тип MediaList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Текст>
}


тип MessageEvent<T> = интерфейс
{

}


тип MimeTypeArray = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<MimeType>
}


тип NamedNodeMap = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Attr>
}


тип Navigator = интерфейс
{
  операция requestMediaKeySystemAccess(keySystem: Текст, supportedConfigurations: Iterable<MediaKeySystemConfiguration>): Promise<MediaKeySystemAccess>

  операция vibrate(pattern: Iterable<Число>): ДаНет
}


тип NodeList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Node>

  операция entries(): IterableIterator<объект { _0: Число, _1: Node }>

  операция keys(): IterableIterator<Число>

  операция values(): IterableIterator<Node>
}


тип NodeListOf<TNode = Node> = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<TNode>

  операция entries(): IterableIterator<объект { _0: Число, _1: TNode }>

  операция keys(): IterableIterator<Число>

  операция values(): IterableIterator<TNode>
}


тип Plugin = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<MimeType>
}


тип PluginArray = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Plugin>
}


тип RTCRtpTransceiver = интерфейс
{
  операция setCodecPreferences(codecs: Iterable<RTCRtpCodecCapability>)
}


тип RTCStatsReport = интерфейс ReadonlyMap<Текст, /*(!) any */ Объект?>
{

}


тип SVGLengthList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<SVGLength>
}


тип SVGNumberList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<SVGNumber>
}


тип SVGPointList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<DOMPoint>
}


тип SVGStringList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Текст>
}


тип SVGTransformList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<SVGTransform>
}


тип SourceBufferList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<SourceBuffer>
}


тип SpeechRecognitionResult = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<SpeechRecognitionAlternative>
}


тип SpeechRecognitionResultList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<SpeechRecognitionResult>
}


тип StylePropertyMapReadOnly = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<объект { _0: Текст, _1: Iterable<CSSStyleValue> }>

  операция entries(): IterableIterator<объект { _0: Текст, _1: Iterable<CSSStyleValue> }>

  операция keys(): IterableIterator<Текст>

  операция values(): IterableIterator<Iterable<CSSStyleValue>>
}


тип StyleSheetList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<CSSStyleSheet>
}


тип SubtleCrypto = интерфейс
{
  операция deriveKey(algorithm: Объект? /*(!)AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params*/, baseKey: CryptoKey, derivedKeyType: Объект? /*(!)AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params*/, extractable: ДаНет, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>

  операция generateKey(algorithm: Объект? /*(!)RsaHashedKeyGenParams | EcKeyGenParams*/, extractable: ДаНет, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>

  операция generateKey(algorithm: Объект? /*(!)AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params*/, extractable: ДаНет, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>

  операция generateKey(algorithm: AlgorithmIdentifier, extractable: ДаНет, keyUsages: Iterable<KeyUsage>): Promise<Объект? /*(!)CryptoKeyPair | CryptoKey*/>

  операция importKey(format: "jwk", keyData: JsonWebKey, algorithm: Объект? /*(!)AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm*/, extractable: ДаНет, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>

  операция importKey(format: Exclude<KeyFormat, "jwk">, keyData: BufferSource, algorithm: Объект? /*(!)AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm*/, extractable: ДаНет, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>

  операция unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: Объект? /*(!)AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams*/, unwrappedKeyAlgorithm: Объект? /*(!)AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm*/, extractable: ДаНет, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>
}


тип TextTrackCueList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<TextTrackCue>
}


тип TextTrackList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<TextTrack>
}


тип TouchList = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<Touch>
}


тип URLSearchParams = интерфейс
{
  операция [Symbol.iterator](): IterableIterator<объект { _0: Текст, _1: Текст }>

  операция entries(): IterableIterator<объект { _0: Текст, _1: Текст }>

  операция keys(): IterableIterator<Текст>

  операция values(): IterableIterator<Текст>
}


тип WEBGL_draw_buffers = интерфейс
{
  операция drawBuffersWEBGL(buffers: Iterable<GLenum>)
}


тип WEBGL_multi_draw = интерфейс
{
  операция multiDrawArraysInstancedWEBGL(mode: GLenum, firstsList: Объект? /*(!)Int32Array | Iterable<GLint>*/, firstsOffset: GLuint, countsList: Объект? /*(!)Int32Array | Iterable<GLsizei>*/, countsOffset: GLuint, instanceCountsList: Объект? /*(!)Int32Array | Iterable<GLsizei>*/, instanceCountsOffset: GLuint, drawcount: GLsizei)

  операция multiDrawArraysWEBGL(mode: GLenum, firstsList: Объект? /*(!)Int32Array | Iterable<GLint>*/, firstsOffset: GLuint, countsList: Объект? /*(!)Int32Array | Iterable<GLsizei>*/, countsOffset: GLuint, drawcount: GLsizei)

  операция multiDrawElementsInstancedWEBGL(mode: GLenum, countsList: Объект? /*(!)Int32Array | Iterable<GLsizei>*/, countsOffset: GLuint, type`: GLenum, offsetsList: Объект? /*(!)Int32Array | Iterable<GLsizei>*/, offsetsOffset: GLuint, instanceCountsList: Объект? /*(!)Int32Array | Iterable<GLsizei>*/, instanceCountsOffset: GLuint, drawcount: GLsizei)

  операция multiDrawElementsWEBGL(mode: GLenum, countsList: Объект? /*(!)Int32Array | Iterable<GLsizei>*/, countsOffset: GLuint, type`: GLenum, offsetsList: Объект? /*(!)Int32Array | Iterable<GLsizei>*/, offsetsOffset: GLuint, drawcount: GLsizei)
}


тип WebGL2RenderingContextBase = интерфейс
{
  операция clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLfloat>, srcOffset: GLuint? = пусто)

  операция clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLint>, srcOffset: GLuint? = пусто)

  операция clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Iterable<GLuint>, srcOffset: GLuint? = пусто)

  операция drawBuffers(buffers: Iterable<GLenum>)

  операция getActiveUniforms(program: WebGLProgram, uniformIndices: Iterable<GLuint>, pname: GLenum): /*(!) any */ Объект?

  операция getUniformIndices(program: WebGLProgram, uniformNames: Iterable<Текст>): Iterable<GLuint>?

  операция invalidateFramebuffer(target: GLenum, attachments: Iterable<GLenum>)

  операция invalidateSubFramebuffer(target: GLenum, attachments: Iterable<GLenum>, x: GLint, y: GLint, width: GLsizei, height: GLsizei)

  операция transformFeedbackVaryings(program: WebGLProgram, varyings: Iterable<Текст>, bufferMode: GLenum)

  операция uniform1uiv(location: WebGLUniformLocation?, data: Iterable<GLuint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform2uiv(location: WebGLUniformLocation?, data: Iterable<GLuint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform3uiv(location: WebGLUniformLocation?, data: Iterable<GLuint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform4uiv(location: WebGLUniformLocation?, data: Iterable<GLuint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix2x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix2x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix3x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix3x4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix4x2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix4x3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция vertexAttribI4iv(index: GLuint, values: Iterable<GLint>)

  операция vertexAttribI4uiv(index: GLuint, values: Iterable<GLuint>)
}


тип WebGL2RenderingContextOverloads = интерфейс
{
  операция uniform1fv(location: WebGLUniformLocation?, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform1iv(location: WebGLUniformLocation?, data: Iterable<GLint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform2fv(location: WebGLUniformLocation?, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform2iv(location: WebGLUniformLocation?, data: Iterable<GLint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform3fv(location: WebGLUniformLocation?, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform3iv(location: WebGLUniformLocation?, data: Iterable<GLint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform4fv(location: WebGLUniformLocation?, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniform4iv(location: WebGLUniformLocation?, data: Iterable<GLint>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix2fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix3fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)

  операция uniformMatrix4fv(location: WebGLUniformLocation?, transpose: GLboolean, data: Iterable<GLfloat>, srcOffset: GLuint? = пусто, srcLength: GLuint? = пусто)
}


тип WebGLRenderingContextBase = интерфейс
{
  операция vertexAttrib1fv(index: GLuint, values: Iterable<GLfloat>)

  операция vertexAttrib2fv(index: GLuint, values: Iterable<GLfloat>)

  операция vertexAttrib3fv(index: GLuint, values: Iterable<GLfloat>)

  операция vertexAttrib4fv(index: GLuint, values: Iterable<GLfloat>)
}


тип WebGLRenderingContextOverloads = интерфейс
{
  операция uniform1fv(location: WebGLUniformLocation?, v: Iterable<GLfloat>)

  операция uniform1iv(location: WebGLUniformLocation?, v: Iterable<GLint>)

  операция uniform2fv(location: WebGLUniformLocation?, v: Iterable<GLfloat>)

  операция uniform2iv(location: WebGLUniformLocation?, v: Iterable<GLint>)

  операция uniform3fv(location: WebGLUniformLocation?, v: Iterable<GLfloat>)

  операция uniform3iv(location: WebGLUniformLocation?, v: Iterable<GLint>)

  операция uniform4fv(location: WebGLUniformLocation?, v: Iterable<GLfloat>)

  операция uniform4iv(location: WebGLUniformLocation?, v: Iterable<GLint>)

  операция uniformMatrix2fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Iterable<GLfloat>)

  операция uniformMatrix3fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Iterable<GLfloat>)

  операция uniformMatrix4fv(location: WebGLUniformLocation?, transpose: GLboolean, value: Iterable<GLfloat>)
}

