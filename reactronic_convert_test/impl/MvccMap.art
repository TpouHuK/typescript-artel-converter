внешнее {
  //// The below copyright notice and the license permission notice
  //// shall be included in all copies or substantial portions.
  //// Copyright (C) 2016-2022 Nezaboodka Software <contact@nezaboodka.com>
  //// License: https://raw.githubusercontent.com/nezaboodka/reactronic/master/LICENSE
  //// By contributing, you agree that your contributions will be
  //// automatically licensed under the license referred above.
  //// MvccMap
  тип MvccMap<K, V> = объект на основе MvccObject<K, V>
  {
    /*(!) private */ 
    impl: Map<K, V>

    при создании(isObservable: ДаНет, map: Map<K, V>)

    операция clear(): Ничего

    операция delete(key: K): ДаНет

    операция forEach(callbackfn: операция(value: V, key: K, map: Map<K, V>): Ничего, thisArg: Объект? = пусто): Ничего

    операция get(key: K): V?

    операция has(key: K): ДаНет

    операция set(key: K, value: V): /*(!) any */ Объект

    операция entries(): IterableIterator<простой объект { _0: K, _1: V }>

    операция keys(): IterableIterator<K>

    операция values(): IterableIterator<V>

    операция [Symbol.toStringTag](): Текст

    size: Число
      при чтении { }

    mutable: Map<K, V>
      при чтении { }
  }

  //// TransactionalMap<K, V>
  тип TransactionalMap<K, V> = объект на основе MvccMap<K, V>
  {
    при создании()

    при создании(iterable: Iterable</*(!) защищено */ простой объект { _0: K, _1: V }>? = пусто)

    при создании(args: Объект? = пусто)
  }

  //// ObservableMap<K, V>
  тип ObservableMap<K, V> = объект на основе MvccMap<K, V>
  {
    при создании()

    при создании(iterable: Iterable</*(!) защищено */ простой объект { _0: K, _1: V }>? = пусто)

    при создании(args: Объект? = пусто)
  }

}
