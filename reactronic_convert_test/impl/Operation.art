внешнее {
  //// The below copyright notice and the license permission notice
  //// shall be included in all copies or substantial portions.
  //// Copyright (C) 2016-2022 Nezaboodka Software <contact@nezaboodka.com>
  //// License: https://raw.githubusercontent.com/nezaboodka/reactronic/master/LICENSE
  //// By contributing, you agree that your contributions will be
  //// automatically licensed under the license referred above.
  тип OperationController = объект на основе Controller
  {
    защищено
    objectHandle: ObjectHandle

    защищено
    memberName: MemberName

    операция configure(options: Partial<MemberOptions>): MemberOptions

    операция markObsolete()

    операция pullLastResult(args: Список</*(!) any */ Объект?>? = пусто): /*(!) any */ Объект?

    при создании(h: ObjectHandle, m: MemberName)/*(!) any */ Объект?

    операция useOrRun(weak: ДаНет, args: Список</*(!) any */ Объект?>?): Operation

    глобальный 
    операция getControllerOf(method: F</*(!) any */ Объект?>): Controller</*(!) any */ Объект?>

    глобальный 
    операция configureImpl(self: OperationController?, options: Partial<MemberOptions>): MemberOptions

    #js.МассивПараметров
    глобальный 
    операция runWithin<T>(op: Operation?, func: F<T>, args: Список</*(!) any */ Объект?>): T

    глобальный 
    операция why(): Текст

    глобальный 
    операция briefWhy(): Текст

    глобальный 
    операция dependencies(): Список<Текст>

    /*(!) private */ 
    операция peek(args: Список</*(!) any */ Объект?>?): OperationContext

    /*(!) private */ 
    операция use(): OperationContext

    /*(!) private */ 
    операция edit(): OperationContext

    /*(!) private */ 
    операция acquireFromSnapshot(os: ObjectSnapshot, args: Список</*(!) any */ Объект?>?): Operation

    /*(!) private */ 
    операция run(existing: OperationContext, separation: SeparationMode, options: MemberOptions, token: /*(!) any */ Объект?, args: Список</*(!) any */ Объект?>?): OperationContext

    /*(!) private */ глобальный 
    операция markObsolete(self: OperationController)

    options: MemberOptions
      при чтении { }

    unobservable: /*(!) any */ Объект?
      при чтении { }

    args: ReadonlyArray</*(!) any */ Объект?>
      при чтении { }

    result: /*(!) any */ Объект?
      при чтении { }

    error: ДаНет
      при чтении { }

    stamp: Число
      при чтении { }

    isUpToDate: ДаНет
      при чтении { }
  }

  //// Operation
  //// function propagationHint(cause: MemberInfo, full: boolean): string[] {
  ////   const result: string[] = []
  ////   let observable: Observable = cause.snapshot.data[cause.memberName]
  ////   while (observable instanceof Operation && observable.obsoleteDueTo) {
  ////     full && result.push(Dump.snap(cause.snapshot, cause.memberName))
  ////     cause = observable.obsoleteDueTo
  ////     observable = cause.snapshot.data[cause.memberName]
  ////   }
  ////   result.push(Dump.snap(cause.snapshot, cause.memberName))
  ////   full && result.push(cause.snapshot.snapshot.hint)
  ////   return result
  //// }
  ///* istanbul ignore next */
  операция resolveReturn(value: /*(!) any */ Объект?): /*(!) any */ Объект?

  ///* istanbul ignore next */
  операция rejectRethrow(error: /*(!) any */ Объект?): Никогда

}
