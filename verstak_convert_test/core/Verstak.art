внешнее {
  //// The below copyright notice and the license permission notice
  //// shall be included in all copies or substantial portions.
  //// Copyright (C) 2019-2022 Nezaboodka Software <contact@nezaboodka.com>
  //// License: https://raw.githubusercontent.com/nezaboodka/verstak/master/LICENSE
  //// By contributing, you agree that your contributions will be
  //// automatically licensed under the license referred above.
  //// Verstak
  тип Verstak = объект
  {
    глобальный защищено
    shortFrameDuration: /*(!) any */ Объект?

    глобальный защищено
    longFrameDuration: /*(!) any */ Объект?

    глобальный 
    currentRebuildPriority: /*(!) any */ Объект?

    глобальный 
    frameDuration: /*(!) any */ Объект?

    глобальный 
    операция claim<T, M, C, R>(driver: Driver<T>, builder: BlockBuilder<T, M, C, R>? = пусто, base: BlockBuilder<T, M, C, R>? = пусто): Block<T, M, C, R>

    глобальный 
    операция triggerRebuild(block: Block</*(!) any */ Объект?, /*(!) any */ Объект?, /*(!) any */ Объект?, Ничего>, triggers: /*(!) unknown */ Объект?)

    глобальный 
    операция rebuildNestedTreesThenDo(action: операция(error: /*(!) unknown */ Объект?): Ничего)

    глобальный 
    операция getDefaultLoggingOptions(): LoggingOptions?

    глобальный 
    операция setDefaultLoggingOptions(logging: LoggingOptions? = пусто)

    block: Block
      при чтении { }
  }

  //// BaseDriver
  тип BaseDriver<T, C> = объект на основе Driver<T, C>
  {
    /*(!) public */ глобальный защищено
    fragment: /*(!) any */ Объект?

    при создании(name: Текст, isRow: ДаНет, preset: SimpleDelegate<T>? = пусто)/*(!) any */ Объект?

    операция claim(block: Block<T, /*(!) unknown */ Объект?, C>)

    операция create(block: Block<T, /*(!) unknown */ Объект?, C>, b: объект { native: T; controller: C })

    операция initialize(block: Block<T, /*(!) unknown */ Объект?, C>)

    операция mount(block: Block<T, /*(!) unknown */ Объект?, C>)

    операция rebuild(block: Block<T, /*(!) unknown */ Объект?, C>): Ничего | Promise<Ничего>

    операция finalize(block: Block<T, /*(!) unknown */ Объект?, C>, isLeader: ДаНет): ДаНет

    операция applyKind(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: BlockKind)

    операция applyCoords(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: BlockCoords?)

    операция applyWidthGrowth(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: Число)

    операция applyMinWidth(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: Текст)

    операция applyMaxWidth(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: Текст)

    операция applyHeightGrowth(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: Число)

    операция applyMinHeight(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: Текст)

    операция applyMaxHeight(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: Текст)

    операция applyContentAlignment(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: Align)

    операция applyBlockAlignment(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: Align)

    операция applyContentWrapping(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: ДаНет)

    операция applyOverlayVisible(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, value: ДаНет?)

    операция applyStyle(block: Block<T, /*(!) any */ Объект?, C, /*(!) any */ Объект?>, secondary: ДаНет, styleName: Текст, enabled: ДаНет? = пусто)
  }

  //// Utils
  тип StaticDriver<T> = объект на основе BaseDriver<T>
  {
    защищено
    element: T

    при создании(element: T, name: Текст, isRow: ДаНет, preset: SimpleDelegate<T>? = пусто)/*(!) any */ Объект?

    операция create(block: Block<T, /*(!) unknown */ Объект?, /*(!) unknown */ Объект?, Ничего>, b: объект { native: T; controller: /*(!) unknown */ Объект? })
  }

  //// CursorCommandDriver
  тип CursorCommand = объект
  {
    absolute: Текст?

    columnShift: Число?

    rowShift: Число?
  }

  тип CursorCommandDriver = объект на основе BaseDriver
  {
    при создании()/*(!) any */ Объект?

    операция create(block: Block<CursorCommand, /*(!) unknown */ Объект?, Ничего, Ничего>, b: объект { native: CursorCommand; controller: Ничего })
  }

  //// SubTreeVariable
  тип SubTreeVariable<T = Object> = объект
  {
    защищено
    defaultValue: T?

    при создании(defaultValue: T? = пусто)/*(!) any */ Объект?

    value: T
      при чтении { }
      при записи { }

    valueOrUndefined: T?
      при чтении { }
  }

  //// CursorPosition
  //// BlockCtxImpl
  //// BlockNodeImpl
  //// BlockImpl
  //// Internal
  //// function forEachChildRecursively(item: Item<XBlock>, action: (e: any) => void): void {
  ////   const block = item.instance
  ////   const e = block.native
  ////   e && action(e)
  ////   for (const item of block.children.items())
  ////     forEachChildRecursively(item, action)
  //// }
  //// Seamless support for asynchronous programming
  //// Globals
}
